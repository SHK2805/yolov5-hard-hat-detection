AWSTemplateFormatVersion: '2010-09-09'
Description: Create S3 bucket, security group, EC2 instance, and ECR repository with necessary configurations

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-ml-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: dev-sg-ec2
      GroupDescription: Allow HTTP, HTTPS, and SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref DefaultVpcId # Replace with your VPC ID if needed

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.small'
      SecurityGroupIds:
        - !Ref MySecurityGroup
      KeyName: 'dev'  # Replace with your key pair name
      ImageId: 'ami-005fc0f236362e99f'  # Replace with your desired AMI ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          # updates
          apt update -y
          apt upgrade -y
          
          # python
          apt install -y python3-pip
          apt install -y python3.10-venv
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          chmod 666 /var/run/docker.sock
          
          # docker
          apt-get install -y apt-transport-https ca-certificates curl
          
          # expose docker port
          iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
          iptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT
          
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2Instance --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyEC2Instance --region ${AWS::Region}

  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-ecr-repo-${AWS::AccountId}
      ImageScanningConfiguration:
        scanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Expire untagged images older than 30 days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"

Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref Bucket
  SecurityGroupId:
    Description: ID of the Security Group
    Value: !Ref MySecurityGroup
  EC2InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref MyEC2Instance
  DefaultVpcId:
    Description: ID of the Default VPC
    Value: !Ref DefaultVpcId
  ECRRepositoryUri:
    Description: URI of the ECR Repository
    Value: !GetAtt MyECRRepository.RepositoryUri
